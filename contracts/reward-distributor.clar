(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-SHIPMENT u101)
(define-constant ERR-ALREADY-CLAIMED u102)
(define-constant ERR-INSUFFICIENT-POOL u103)
(define-constant ERR-INVALID-RATE u104)
(define-constant ERR-INVALID-CAP u105)
(define-constant ERR-INVALID-MULTIPLIER u106)
(define-constant ERR-INVALID-TIMESTAMP u107)
(define-constant ERR-BATCH-TOO-LARGE u108)
(define-constant ERR-INVALID-RECIPIENT u109)
(define-constant ERR-POOL-NOT-SET u110)
(define-constant ERR-TRAIT-NOT-SET u111)
(define-constant ERR-INVALID-AMOUNT u112)
(define-constant ERR-INVALID-DURATION u113)
(define-constant ERR-INACTIVE u114)
(define-constant ERR-INVALID-STATUS u115)
(define-constant ERR-INVALID-ECO-PROOF u116)
(define-constant ERR-INVALID-BULK u117)
(define-constant ERR-INVALID-WEIGHT u118)
(define-constant ERR-INVALID-FACTOR u119)
(define-constant ERR-INVALID-BONUS u120)

(define-data-var admin principal tx-sender)
(define-data-var token-address (optional principal) none)
(define-data-var registry-address (optional principal) none)
(define-data-var verifier-address (optional principal) none)
(define-data-var reward-pool uint u0)
(define-data-var bulk-bonus-rate uint u10)
(define-data-var eco-bonus-rate uint u15)
(define-data-var min-weight uint u50)
(define-data-var max-reward-cap uint u1000000)
(define-data-var time-multiplier uint u1)
(define-data-var active bool true)
(define-data-var total-distributed uint u0)
(define-data-var last-distribution uint u0)
(define-data-var min-duration uint u1)
(define-data-var max-batch-size uint u50)
(define-data-var eco-threshold uint u500)
(define-data-var bulk-factor uint u2)
(define-data-var bonus-cap uint u50000)
(define-data-var decay-rate uint u5)

(define-map claimed-shipments uint bool)
(define-map pending-rewards principal uint)
(define-map shipment-multipliers uint uint)
(define-map distribution-history uint {amount: uint, timestamp: uint})
(define-map user-stats principal {total-claimed: uint, last-claim: uint})
(define-map eco-levels uint uint)
(define-map bulk-levels uint uint)

(define-read-only (get-admin)
  (var-get admin)
)

(define-read-only (get-token-address)
  (var-get token-address)
)

(define-read-only (get-registry-address)
  (var-get registry-address)
)

(define-read-only (get-verifier-address)
  (var-get verifier-address)
)

(define-read-only (get-reward-pool)
  (var-get reward-pool)
)

(define-read-only (get-bulk-bonus-rate)
  (var-get bulk-bonus-rate)
)

(define-read-only (get-eco-bonus-rate)
  (var-get eco-bonus-rate)
)

(define-read-only (get-min-weight)
  (var-get min-weight)
)

(define-read-only (get-max-reward-cap)
  (var-get max-reward-cap)
)

(define-read-only (get-time-multiplier)
  (var-get time-multiplier)
)

(define-read-only (is-active)
  (var-get active)
)

(define-read-only (get-total-distributed)
  (var-get total-distributed)
)

(define-read-only (get-last-distribution)
  (var-get last-distribution)
)

(define-read-only (get-pending-rewards (user principal))
  (default-to u0 (map-get? pending-rewards user))
)

(define-read-only (get-claimed-status (shipment-id uint))
  (default-to false (map-get? claimed-shipments shipment-id))
)

(define-read-only (get-shipment-multiplier (shipment-id uint))
  (default-to u1 (map-get? shipment-multipliers shipment-id))
)

(define-read-only (get-distribution-history (index uint))
  (map-get? distribution-history index)
)

(define-read-only (get-user-stats (user principal))
  (map-get? user-stats user)
)

(define-private (validate-rate (rate uint))
  (if (and (> rate u0) (<= rate u100))
    (ok true)
    (err ERR-INVALID-RATE))
)

(define-private (validate-cap (cap uint))
  (if (> cap u0)
    (ok true)
    (err ERR-INVALID-CAP))
)

(define-private (validate-multiplier (multi uint))
  (if (>= multi u1)
    (ok true)
    (err ERR-INVALID-MULTIPLIER))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts (var-get last-distribution))
    (ok true)
    (err ERR-INVALID-TIMESTAMP))
)

(define-private (validate-amount (amt uint))
  (if (> amt u0)
    (ok true)
    (err ERR-INVALID-AMOUNT))
)

(define-private (validate-duration (dur uint))
  (if (>= dur (var-get min-duration))
    (ok true)
    (err ERR-INVALID-DURATION))
)

(define-private (validate-status (status bool))
  (if status
    (ok true)
    (err ERR-INVALID-STATUS))
)

(define-private (validate-eco-proof (proof bool))
  (if proof
    (ok true)
    (err ERR-INVALID-ECO-PROOF))
)

(define-private (validate-bulk (bulk bool))
  (if bulk
    (ok true)
    (err ERR-INVALID-BULK))
)

(define-private (validate-weight (weight uint))
  (if (>= weight (var-get min-weight))
    (ok true)
    (err ERR-INVALID-WEIGHT))
)

(define-private (validate-factor (factor uint))
  (if (> factor u0)
    (ok true)
    (err ERR-INVALID-FACTOR))
)

(define-private (validate-bonus (bonus uint))
  (if (<= bonus (var-get bonus-cap))
    (ok true)
    (err ERR-INVALID-BONUS))
)

(define-private (calculate-base-reward (weight uint))
  (* weight (var-get time-multiplier))
)

(define-private (apply-bulk-bonus (reward uint) (bulk bool))
  (if bulk
    (+ reward (* reward (var-get bulk-bonus-rate) (/ u100 u1)))
    reward)
)

(define-private (apply-eco-bonus (reward uint) (eco bool))
  (if eco
    (+ reward (* reward (var-get eco-bonus-rate) (/ u100 u1)))
    reward)
)

(define-private (apply-decay (reward uint) (duration uint))
  (let ((decay (* reward (var-get decay-rate) (/ duration u100))))
    (if (> reward decay)
      (- reward decay)
      u0))
)

(define-private (cap-reward (reward uint))
  (if (> reward (var-get max-reward-cap))
    (var-get max-reward-cap)
    reward)
)

(define-private (calculate-reward (shipment-id uint))
  (let ((registry (unwrap! (var-get registry-address) (err ERR-TRAIT-NOT-SET)))
        (verifier (unwrap! (var-get verifier-address) (err ERR-TRAIT-NOT-SET)))
        (shipment (unwrap! (contract-call? .shipment-registry get-shipment shipment-id) (err ERR-INVALID-SHIPMENT)))
        (eco-proof (unwrap! (contract-call? .eco-verifier verify-eco shipment-id) (err ERR-INVALID-ECO-PROOF)))
        (weight (get weight shipment))
        (bulk (get bulk shipment))
        (duration (- block-height (get timestamp shipment)))
        (eco (get is-eco eco-proof)))
    (try! (validate-weight weight))
    (try! (validate-duration duration))
    (try! (validate-bulk bulk))
    (try! (validate-eco-proof eco))
    (let ((base (calculate-base-reward weight))
          (with-bulk (apply-bulk-bonus base bulk))
          (with-eco (apply-eco-bonus with-bulk eco))
          (with-decay (apply-decay with-eco duration)))
      (cap-reward with-decay))))

(define-public (set-admin (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (is-eq new-admin 'SP000000000000000000002Q6VF78)) (err ERR-NOT-AUTHORIZED))
    (var-set admin new-admin)
    (ok true))
)

(define-public (set-token-address (address principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (is-eq address 'SP000000000000000000002Q6VF78)) (err ERR-NOT-AUTHORIZED))
    (var-set token-address (some address))
    (ok true))
)

(define-public (set-registry-address (address principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (is-eq address 'SP000000000000000000002Q6VF78)) (err ERR-NOT-AUTHORIZED))
    (var-set registry-address (some address))
    (ok true))
)

(define-public (set-verifier-address (address principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (is-eq address 'SP000000000000000000002Q6VF78)) (err ERR-NOT-AUTHORIZED))
    (var-set verifier-address (some address))
    (ok true))
)

(define-public (fund-pool (amount uint))
  (let ((token (unwrap! (var-get token-address) (err ERR-TRAIT-NOT-SET))))
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount amount))
    (try! (as-contract (contract-call? .ecoship-token transfer amount tx-sender (as-contract tx-sender) none)))
    (var-set reward-pool (+ (var-get reward-pool) amount))
    (ok true))
)

(define-public (set-bulk-bonus-rate (rate uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-rate rate))
    (var-set bulk-bonus-rate rate)
    (ok true))
)

(define-public (set-eco-bonus-rate (rate uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-rate rate))
    (var-set eco-bonus-rate rate)
    (ok true))
)

(define-public (set-min-weight (weight uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-weight weight))
    (var-set min-weight weight)
    (ok true))
)

(define-public (set-max-reward-cap (cap uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-cap cap))
    (var-set max-reward-cap cap)
    (ok true))
)

(define-public (set-time-multiplier (multi uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-multiplier multi))
    (var-set time-multiplier multi)
    (ok true))
)

(define-public (toggle-active)
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (var-set active (not (var-get active)))
    (ok (var-get active)))
)

(define-public (claim-rewards (shipment-id uint))
  (let ((reward (calculate-reward shipment-id))
        (token (unwrap! (var-get token-address) (err ERR-TRAIT-NOT-SET)))
        (recipient tx-sender))
    (asserts! (var-get active) (err ERR-INACTIVE))
    (asserts! (not (get-claimed-status shipment-id)) (err ERR-ALREADY-CLAIMED))
    (try! (validate-amount reward))
    (asserts! (>= (var-get reward-pool) reward) (err ERR-INSUFFICIENT-POOL))
    (try! (as-contract (contract-call? .ecoship-token transfer reward (as-contract tx-sender) recipient none)))
    (map-set claimed-shipments shipment-id true)
    (var-set reward-pool (- (var-get reward-pool) reward))
    (var-set total-distributed (+ (var-get total-distributed) reward))
    (var-set last-distribution block-height)
    (let ((pending (get-pending-rewards recipient)))
      (map-set pending-rewards recipient (+ pending reward)))
    (map-set distribution-history (var-get total-distributed) {amount: reward, timestamp: block-height})
    (let ((stats (default-to {total-claimed: u0, last-claim: u0} (get-user-stats recipient))))
      (map-set user-stats recipient {total-claimed: (+ (get total-claimed stats) reward), last-claim: block-height}))
    (print {event: "rewards-claimed", shipment-id: shipment-id, amount: reward})
    (ok reward))
)

(define-public (distribute-batch (shipment-ids (list 50 uint)))
  (let ((rewards (map calculate-reward shipment-ids))
        (total (fold + rewards u0)))
    (asserts! (<= (len shipment-ids) (var-get max-batch-size)) (err ERR-BATCH-TOO-LARGE))
    (asserts! (var-get active) (err ERR-INACTIVE))
    (asserts! (>= (var-get reward-pool) total) (err ERR-INSUFFICIENT-POOL))
    (fold claim-for-batch shipment-ids (ok u0))))

(define-private (claim-for-batch (shipment-id uint) (acc (response uint uint)))
  (match acc
    sum (let ((reward (calculate-reward shipment-id)))
          (try! (claim-rewards shipment-id))
          (ok (+ sum reward)))
    err acc))